<?php

use Phalcon\Mvc\Model\Criteria;
use Phalcon\Paginator\Adapter\Model as Paginator;

class PurchreqlineController extends ControllerBase {

    /**
     * Index action
     */
    public function indexAction() {
        $this->persistent->parameters = null;
    }

    /**
     * Searches for purchreqline
     */
    public function searchAction() {

        $numberPage = 1;
        if ($this->request->isPost()) {
            $query = Criteria::fromInput($this->di, "Purchreqline", $_POST);
            $this->persistent->parameters = $query->getParams();
        } else {
            $numberPage = $this->request->getQuery("page", "int");
        }

        $parameters = $this->persistent->parameters;
        if (!is_array($parameters)) {
            $parameters = array();
        }
        $parameters["order"] = "RecId";

        $purchreqline = Purchreqline::find($parameters);
        if (count($purchreqline) == 0) {
            $this->flash->notice("The search did not find any purchreqline");

            return $this->dispatcher->forward(array(
                        "controller" => "purchreqline",
                        "action" => "index"
                    ));
        }

        $paginator = new Paginator(array(
                    "data" => $purchreqline,
                    "limit" => 10,
                    "page" => $numberPage
                ));

        $this->view->page = $paginator->getPaginate();
    }

    /**
     * Displays the creation form
     */
    public function newAction($RecId) {
        $this->view->setRenderLevel(Phalcon\Mvc\View::LEVEL_ACTION_VIEW);
        $this->view->item = InventItem::find();
        $this->tag->setDefault("Purchreqheader", $RecId);
    }

    /**
     * Edits a purchreqline
     *
     * @param string $RecId
     */
    public function editAction($RecId) {

        $this->view->item = InventItem::find();

        if (!$this->request->isPost()) {

            $this->view->setRenderLevel(Phalcon\Mvc\View::LEVEL_ACTION_VIEW);

            $purchreqline = Purchreqline::findFirstByRecId($RecId);
            if (!$purchreqline) {
                $this->flash->error("purchreqline was not found");

                return $this->dispatcher->forward(array(
                            "controller" => "purchreqline",
                            "action" => "index"
                        ));
            }

            $this->view->RecId = $purchreqline->RecId;

            $this->tag->setDefault("RecId", $purchreqline->RecId);
            $this->tag->setDefault("Purchreqheader", $purchreqline->Purchreqheader);
            $this->tag->setDefault("ItemId", $purchreqline->ItemId);
            $this->tag->setDefault("ItemName", $purchreqline->ItemName);
            $this->tag->setDefault("Qty", $purchreqline->Qty);
            $this->tag->setDefault("IsReceipt", $purchreqline->IsReceipt);
            $this->tag->setDefault("CreatedBy", $purchreqline->CreatedBy);
            $this->tag->setDefault("CreatedDateTime", $purchreqline->CreatedDateTime);
        }
    }

    /**
     * Creates a new purchreqline
     */
    public function createAction() {

        if (!$this->request->isPost()) {
            return $this->dispatcher->forward(array(
                        "controller" => "purchreqline",
                        "action" => "index"
                    ));
        }

        $purchreqline = new Purchreqline();

        $purchreqline->Purchreqheader = $this->request->getPost("Purchreqheader");
        $purchreqline->ItemId = $this->request->getPost("ItemId");
        $purchreqline->ItemName = Inventitem::findFirstByKodeItem($purchreqline->ItemId)->NamaItem;
        $purchreqline->Qty = $this->request->getPost("Qty");
        $purchreqline->QtyRemaining = $purchreqline->Qty;
        $purchreqline->IsReceipt = $this->request->getPost("IsReceipt");
        $purchreqline->CreatedBy = $this->session->auth['username'];
        $purchreqheader->CreatedDateTime = date('Y-m-d H:i:s');


        if (!$purchreqline->save()) {
            foreach ($purchreqline->getMessages() as $message) {
                $this->flash->error($message);
            }

            return $this->dispatcher->forward(array(
                        "controller" => "purchreqline",
                        "action" => "new"
                    ));
        }

        $this->flash->success("purchreqline was created successfully");

        return $this->response->redirect("purchreqheader/edit/" . $purchreqline->Purchreqheader);
    }

    /**
     * Saves a purchreqline edited
     *
     */
    public function saveAction() {

        if (!$this->request->isPost()) {
            return $this->dispatcher->forward(array(
                        "controller" => "purchreqline",
                        "action" => "index"
                    ));
        }

        $RecId = $this->request->getPost("RecId");

        $purchreqline = Purchreqline::findFirstByRecId($RecId);
        if (!$purchreqline) {
            $this->flash->error("purchreqline does not exist " . $RecId);

            return $this->dispatcher->forward(array(
                        "controller" => "purchreqline",
                        "action" => "index",
                        "params" => array($purchreqline->RecId)
                    ));
        }

        $purchreqline->Purchreqheader = $this->request->getPost("Purchreqheader");
        $purchreqline->ItemId = $this->request->getPost("ItemId");
        $purchreqline->ItemName = Inventitem::findFirstByKodeItem($purchreqline->ItemId)->NamaItem;
        $purchreqline->Qty = $this->request->getPost("Qty");
        $purchreqline->QtyRemaining = $purchreqline->Qty;
        $purchreqline->IsReceipt = $this->request->getPost("IsReceipt");

        if (!$purchreqline->save()) {

            foreach ($purchreqline->getMessages() as $message) {
                $this->flash->error($message);
            }

            return $this->dispatcher->forward(array(
                        "controller" => "purchreqline",
                        "action" => "edit",
                        "params" => array($purchreqline->RecId)
                    ));
        }

        $this->flash->success("purchreqline was updated successfully");
//
//        return $this->dispatcher->forward(array(
//                    "controller" => "purchreqline",
//                    "action" => "index"
//                ));

        return $this->response->redirect(
                        "purchreqheader/edit/" . $purchreqline->Purchreqheader);
    }

    /**
     * Deletes a purchreqline
     *
     * @param string $RecId
     */
    public function deleteAction($RecId) {

        $purchreqline = Purchreqline::findFirstByRecId($RecId);
        if (!$purchreqline) {
            $this->flash->error("purchreqline was not found");

            return $this->dispatcher->forward(array(
                        "controller" => "purchreqline",
                        "action" => "index"
                    ));
        }

        if (!$purchreqline->delete()) {

            foreach ($purchreqline->getMessages() as $message) {
                $this->flash->error($message);
            }

            return $this->dispatcher->forward(array(
                        "controller" => "purchreqline",
                        "action" => "search"
                    ));
        }

        $this->flash->success("purchreqline was deleted successfully");

        return $this->response->redirect("purchreqheader/edit/" . $purchreqline->Purchreqheader);
    }

}
